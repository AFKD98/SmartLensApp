{"ast":null,"code":"import React from 'react';\nimport Utils from '../utils/utils';\nimport Mixins from '../utils/mixins';\nimport F7Icon from './icon';\nimport __reactComponentDispatchEvent from '../runtime-helpers/react-component-dispatch-event.js';\nimport __reactComponentSlots from '../runtime-helpers/react-component-slots.js';\nimport __reactComponentSetProps from '../runtime-helpers/react-component-set-props.js';\n\nclass F7TreeviewItem extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.__reactRefs = {};\n\n    (() => {\n      Utils.bindMethods(this, ['onClick', 'onOpen', 'onClose', 'onLoadChildren']);\n    })();\n  }\n\n  onClick(event) {\n    this.dispatchEvent('click', event);\n  }\n\n  onOpen(el) {\n    if (this.eventTargetEl !== el) return;\n    this.dispatchEvent('treeview:open treeviewOpen', el);\n  }\n\n  onClose(el) {\n    if (this.eventTargetEl !== el) return;\n    this.dispatchEvent('treeview:close treeviewClose', el);\n  }\n\n  onLoadChildren(el, done) {\n    if (this.eventTargetEl !== el) return;\n    this.dispatchEvent('treeview:loadchildren treeviewLoadChildren', el, done);\n  }\n\n  get itemRootAttrs() {\n    const self = this;\n    const props = self.props;\n    const {\n      link\n    } = props;\n    let href = link;\n    if (link === true) href = '#';\n    if (link === false) href = undefined;\n    return Utils.extend({\n      href\n    }, Mixins.linkRouterAttrs(props), Mixins.linkActionsAttrs(props));\n  }\n\n  get itemRootClasses() {\n    const self = this;\n    const props = self.props;\n    const {\n      selectable,\n      selected,\n      itemToggle\n    } = props;\n    return Utils.classNames('treeview-item-root', {\n      'treeview-item-selectable': selectable,\n      'treeview-item-selected': selected,\n      'treeview-item-toggle': itemToggle\n    }, Mixins.linkRouterClasses(props), Mixins.linkActionsClasses(props));\n  }\n\n  get classes() {\n    const self = this;\n    const props = self.props;\n    const {\n      className,\n      opened,\n      loadChildren\n    } = props;\n    return Utils.classNames(className, 'treeview-item', {\n      'treeview-item-opened': opened,\n      'treeview-load-children': loadChildren\n    }, Mixins.colorClasses(props));\n  }\n\n  render() {\n    const self = this;\n    const props = self.props;\n    const {\n      id,\n      style,\n      toggle,\n      label,\n      icon,\n      iconMaterial,\n      iconF7,\n      iconMd,\n      iconIos,\n      iconAurora,\n      iconSize,\n      iconColor,\n      link\n    } = props;\n    const slots = self.slots;\n    const hasChildren = slots.default && slots.default.length || slots.children && slots.children.length || slots['children-start'] && slots['children-start'].length;\n    const needToggle = typeof toggle === 'undefined' ? hasChildren : toggle;\n    let iconEl;\n\n    if (icon || iconMaterial || iconF7 || iconMd || iconIos || iconAurora) {\n      iconEl = React.createElement(F7Icon, {\n        material: iconMaterial,\n        f7: iconF7,\n        icon: icon,\n        md: iconMd,\n        ios: iconIos,\n        aurora: iconAurora,\n        color: iconColor,\n        size: iconSize\n      });\n    }\n\n    const TreeviewRootTag = link || link === '' ? 'a' : 'div';\n    return React.createElement('div', {\n      ref: __reactNode => {\n        this.__reactRefs['el'] = __reactNode;\n      },\n      id: id,\n      style: style,\n      className: self.classes\n    }, React.createElement(TreeviewRootTag, Object.assign({\n      ref: __reactNode => {\n        this.__reactRefs['rootEl'] = __reactNode;\n      },\n      className: self.itemRootClasses\n    }, self.itemRootAttrs), this.slots['root-start'], needToggle && React.createElement('div', {\n      className: 'treeview-toggle'\n    }), React.createElement('div', {\n      className: 'treeview-item-content'\n    }, this.slots['content-start'], iconEl, this.slots['media'], React.createElement('div', {\n      className: 'treeview-item-label'\n    }, this.slots['label-start'], label, this.slots['label']), this.slots['content'], this.slots['content-end']), this.slots['root'], this.slots['root-end']), hasChildren && React.createElement('div', {\n      className: 'treeview-item-children'\n    }, this.slots['children-start'], this.slots['default'], this.slots['children']));\n  }\n\n  componentWillUnmount() {\n    const self = this;\n    const {\n      el,\n      rootEl\n    } = self.refs;\n    rootEl.removeEventListener('click', self.onClick);\n    if (!el || self.$f7) return;\n    self.$f7.off('treeviewOpen', self.onOpen);\n    self.$f7.off('treeviewClose', self.onClose);\n    self.$f7.off('treeviewLoadChildren', self.onLoadChildren);\n    self.eventTargetEl = null;\n    delete self.eventTargetEl;\n  }\n\n  componentDidMount() {\n    const self = this;\n    const {\n      el,\n      rootEl\n    } = self.refs;\n    rootEl.addEventListener('click', self.onClick);\n    if (!el) return;\n    self.eventTargetEl = el;\n    self.$f7ready(f7 => {\n      f7.on('treeviewOpen', self.onOpen);\n      f7.on('treeviewClose', self.onClose);\n      f7.on('treeviewLoadChildren', self.onLoadChildren);\n    });\n  }\n\n  get slots() {\n    return __reactComponentSlots(this.props);\n  }\n\n  dispatchEvent(events, ...args) {\n    return __reactComponentDispatchEvent(this, events, ...args);\n  }\n\n  get refs() {\n    return this.__reactRefs;\n  }\n\n  set refs(refs) {}\n\n}\n\n__reactComponentSetProps(F7TreeviewItem, Object.assign({\n  id: [String, Number],\n  className: String,\n  style: Object,\n  toggle: {\n    type: Boolean,\n    default: undefined\n  },\n  itemToggle: Boolean,\n  selectable: Boolean,\n  selected: Boolean,\n  opened: Boolean,\n  label: String,\n  loadChildren: Boolean,\n  link: {\n    type: [Boolean, String],\n    default: undefined\n  }\n}, Mixins.colorProps, {}, Mixins.linkActionsProps, {}, Mixins.linkRouterProps, {}, Mixins.linkIconProps));\n\nF7TreeviewItem.displayName = 'f7-treeview-item';\nexport default F7TreeviewItem;","map":{"version":3,"sources":["/home/faraz/courses/SE/myapp/node_modules/framework7-react/components/treeview-item.js"],"names":["React","Utils","Mixins","F7Icon","__reactComponentDispatchEvent","__reactComponentSlots","__reactComponentSetProps","F7TreeviewItem","Component","constructor","props","context","__reactRefs","bindMethods","onClick","event","dispatchEvent","onOpen","el","eventTargetEl","onClose","onLoadChildren","done","itemRootAttrs","self","link","href","undefined","extend","linkRouterAttrs","linkActionsAttrs","itemRootClasses","selectable","selected","itemToggle","classNames","linkRouterClasses","linkActionsClasses","classes","className","opened","loadChildren","colorClasses","render","id","style","toggle","label","icon","iconMaterial","iconF7","iconMd","iconIos","iconAurora","iconSize","iconColor","slots","hasChildren","default","length","children","needToggle","iconEl","createElement","material","f7","md","ios","aurora","color","size","TreeviewRootTag","ref","__reactNode","Object","assign","componentWillUnmount","rootEl","refs","removeEventListener","$f7","off","componentDidMount","addEventListener","$f7ready","on","events","args","String","Number","type","Boolean","colorProps","linkActionsProps","linkRouterProps","linkIconProps","displayName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Utils from '../utils/utils';\nimport Mixins from '../utils/mixins';\nimport F7Icon from './icon';\nimport __reactComponentDispatchEvent from '../runtime-helpers/react-component-dispatch-event.js';\nimport __reactComponentSlots from '../runtime-helpers/react-component-slots.js';\nimport __reactComponentSetProps from '../runtime-helpers/react-component-set-props.js';\n\nclass F7TreeviewItem extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.__reactRefs = {};\n\n    (() => {\n      Utils.bindMethods(this, ['onClick', 'onOpen', 'onClose', 'onLoadChildren']);\n    })();\n  }\n\n  onClick(event) {\n    this.dispatchEvent('click', event);\n  }\n\n  onOpen(el) {\n    if (this.eventTargetEl !== el) return;\n    this.dispatchEvent('treeview:open treeviewOpen', el);\n  }\n\n  onClose(el) {\n    if (this.eventTargetEl !== el) return;\n    this.dispatchEvent('treeview:close treeviewClose', el);\n  }\n\n  onLoadChildren(el, done) {\n    if (this.eventTargetEl !== el) return;\n    this.dispatchEvent('treeview:loadchildren treeviewLoadChildren', el, done);\n  }\n\n  get itemRootAttrs() {\n    const self = this;\n    const props = self.props;\n    const {\n      link\n    } = props;\n    let href = link;\n    if (link === true) href = '#';\n    if (link === false) href = undefined;\n    return Utils.extend({\n      href\n    }, Mixins.linkRouterAttrs(props), Mixins.linkActionsAttrs(props));\n  }\n\n  get itemRootClasses() {\n    const self = this;\n    const props = self.props;\n    const {\n      selectable,\n      selected,\n      itemToggle\n    } = props;\n    return Utils.classNames('treeview-item-root', {\n      'treeview-item-selectable': selectable,\n      'treeview-item-selected': selected,\n      'treeview-item-toggle': itemToggle\n    }, Mixins.linkRouterClasses(props), Mixins.linkActionsClasses(props));\n  }\n\n  get classes() {\n    const self = this;\n    const props = self.props;\n    const {\n      className,\n      opened,\n      loadChildren\n    } = props;\n    return Utils.classNames(className, 'treeview-item', {\n      'treeview-item-opened': opened,\n      'treeview-load-children': loadChildren\n    }, Mixins.colorClasses(props));\n  }\n\n  render() {\n    const self = this;\n    const props = self.props;\n    const {\n      id,\n      style,\n      toggle,\n      label,\n      icon,\n      iconMaterial,\n      iconF7,\n      iconMd,\n      iconIos,\n      iconAurora,\n      iconSize,\n      iconColor,\n      link\n    } = props;\n    const slots = self.slots;\n    const hasChildren = slots.default && slots.default.length || slots.children && slots.children.length || slots['children-start'] && slots['children-start'].length;\n    const needToggle = typeof toggle === 'undefined' ? hasChildren : toggle;\n    let iconEl;\n\n    if (icon || iconMaterial || iconF7 || iconMd || iconIos || iconAurora) {\n      iconEl = React.createElement(F7Icon, {\n        material: iconMaterial,\n        f7: iconF7,\n        icon: icon,\n        md: iconMd,\n        ios: iconIos,\n        aurora: iconAurora,\n        color: iconColor,\n        size: iconSize\n      });\n    }\n\n    const TreeviewRootTag = link || link === '' ? 'a' : 'div';\n    return React.createElement('div', {\n      ref: __reactNode => {\n        this.__reactRefs['el'] = __reactNode;\n      },\n      id: id,\n      style: style,\n      className: self.classes\n    }, React.createElement(TreeviewRootTag, Object.assign({\n      ref: __reactNode => {\n        this.__reactRefs['rootEl'] = __reactNode;\n      },\n      className: self.itemRootClasses\n    }, self.itemRootAttrs), this.slots['root-start'], needToggle && React.createElement('div', {\n      className: 'treeview-toggle'\n    }), React.createElement('div', {\n      className: 'treeview-item-content'\n    }, this.slots['content-start'], iconEl, this.slots['media'], React.createElement('div', {\n      className: 'treeview-item-label'\n    }, this.slots['label-start'], label, this.slots['label']), this.slots['content'], this.slots['content-end']), this.slots['root'], this.slots['root-end']), hasChildren && React.createElement('div', {\n      className: 'treeview-item-children'\n    }, this.slots['children-start'], this.slots['default'], this.slots['children']));\n  }\n\n  componentWillUnmount() {\n    const self = this;\n    const {\n      el,\n      rootEl\n    } = self.refs;\n    rootEl.removeEventListener('click', self.onClick);\n    if (!el || self.$f7) return;\n    self.$f7.off('treeviewOpen', self.onOpen);\n    self.$f7.off('treeviewClose', self.onClose);\n    self.$f7.off('treeviewLoadChildren', self.onLoadChildren);\n    self.eventTargetEl = null;\n    delete self.eventTargetEl;\n  }\n\n  componentDidMount() {\n    const self = this;\n    const {\n      el,\n      rootEl\n    } = self.refs;\n    rootEl.addEventListener('click', self.onClick);\n    if (!el) return;\n    self.eventTargetEl = el;\n    self.$f7ready(f7 => {\n      f7.on('treeviewOpen', self.onOpen);\n      f7.on('treeviewClose', self.onClose);\n      f7.on('treeviewLoadChildren', self.onLoadChildren);\n    });\n  }\n\n  get slots() {\n    return __reactComponentSlots(this.props);\n  }\n\n  dispatchEvent(events, ...args) {\n    return __reactComponentDispatchEvent(this, events, ...args);\n  }\n\n  get refs() {\n    return this.__reactRefs;\n  }\n\n  set refs(refs) {}\n\n}\n\n__reactComponentSetProps(F7TreeviewItem, Object.assign({\n  id: [String, Number],\n  className: String,\n  style: Object,\n  toggle: {\n    type: Boolean,\n    default: undefined\n  },\n  itemToggle: Boolean,\n  selectable: Boolean,\n  selected: Boolean,\n  opened: Boolean,\n  label: String,\n  loadChildren: Boolean,\n  link: {\n    type: [Boolean, String],\n    default: undefined\n  }\n}, Mixins.colorProps, {}, Mixins.linkActionsProps, {}, Mixins.linkRouterProps, {}, Mixins.linkIconProps));\n\nF7TreeviewItem.displayName = 'f7-treeview-item';\nexport default F7TreeviewItem;"]},"metadata":{},"sourceType":"module"}