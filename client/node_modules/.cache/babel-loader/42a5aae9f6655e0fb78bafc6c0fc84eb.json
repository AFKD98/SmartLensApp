{"ast":null,"code":"import React from 'react';\nimport Mixins from '../utils/mixins';\nimport Utils from '../utils/utils';\nimport __reactComponentWatch from '../runtime-helpers/react-component-watch.js';\nimport __reactComponentDispatchEvent from '../runtime-helpers/react-component-dispatch-event.js';\nimport __reactComponentSlots from '../runtime-helpers/react-component-slots.js';\nimport __reactComponentSetProps from '../runtime-helpers/react-component-set-props.js';\n\nclass F7LoginScreen extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.__reactRefs = {};\n\n    (() => {\n      Utils.bindMethods(this, ['onOpen', 'onOpened', 'onClose', 'onClosed']);\n    })();\n  }\n\n  onOpen(instance) {\n    this.dispatchEvent('loginscreen:open loginScreenOpen', instance);\n  }\n\n  onOpened(instance) {\n    this.dispatchEvent('loginscreen:opened loginScreenOpened', instance);\n  }\n\n  onClose(instance) {\n    this.dispatchEvent('loginscreen:close loginScreenClose', instance);\n  }\n\n  onClosed(instance) {\n    this.dispatchEvent('loginscreen:closed loginScreenClosed', instance);\n  }\n\n  open(animate) {\n    const self = this;\n    if (!self.f7LoginScreen) return undefined;\n    return self.f7LoginScreen.open(animate);\n  }\n\n  close(animate) {\n    const self = this;\n    if (!self.f7LoginScreen) return undefined;\n    return self.f7LoginScreen.close(animate);\n  }\n\n  render() {\n    const self = this;\n    const props = self.props;\n    const {\n      className,\n      id,\n      style\n    } = props;\n    const classes = Utils.classNames(className, 'login-screen', Mixins.colorClasses(props));\n    return React.createElement('div', {\n      ref: __reactNode => {\n        this.__reactRefs['el'] = __reactNode;\n      },\n      id: id,\n      style: style,\n      className: classes\n    }, this.slots['default']);\n  }\n\n  componentWillUnmount() {\n    const self = this;\n    if (self.f7LoginScreen) self.f7LoginScreen.destroy();\n  }\n\n  componentDidMount() {\n    const self = this;\n    const el = self.refs.el;\n    if (!el) return;\n    self.$f7ready(() => {\n      self.f7LoginScreen = self.$f7.loginScreen.create({\n        el,\n        on: {\n          open: self.onOpen,\n          opened: self.onOpened,\n          close: self.onClose,\n          closed: self.onClosed\n        }\n      });\n\n      if (self.props.opened) {\n        self.f7LoginScreen.open(false);\n      }\n    });\n  }\n\n  get slots() {\n    return __reactComponentSlots(this.props);\n  }\n\n  dispatchEvent(events, ...args) {\n    return __reactComponentDispatchEvent(this, events, ...args);\n  }\n\n  get refs() {\n    return this.__reactRefs;\n  }\n\n  set refs(refs) {}\n\n  componentDidUpdate(prevProps, prevState) {\n    __reactComponentWatch(this, 'props.opened', prevProps, prevState, opened => {\n      const self = this;\n      if (!self.f7LoginScreen) return;\n\n      if (opened) {\n        self.f7LoginScreen.open();\n      } else {\n        self.f7LoginScreen.close();\n      }\n    });\n  }\n\n}\n\n__reactComponentSetProps(F7LoginScreen, Object.assign({\n  id: [String, Number],\n  className: String,\n  style: Object,\n  opened: Boolean\n}, Mixins.colorProps));\n\nF7LoginScreen.displayName = 'f7-login-screen';\nexport default F7LoginScreen;","map":{"version":3,"sources":["/home/faraz/courses/SE/myapp/node_modules/framework7-react/components/login-screen.js"],"names":["React","Mixins","Utils","__reactComponentWatch","__reactComponentDispatchEvent","__reactComponentSlots","__reactComponentSetProps","F7LoginScreen","Component","constructor","props","context","__reactRefs","bindMethods","onOpen","instance","dispatchEvent","onOpened","onClose","onClosed","open","animate","self","f7LoginScreen","undefined","close","render","className","id","style","classes","classNames","colorClasses","createElement","ref","__reactNode","slots","componentWillUnmount","destroy","componentDidMount","el","refs","$f7ready","$f7","loginScreen","create","on","opened","closed","events","args","componentDidUpdate","prevProps","prevState","Object","assign","String","Number","Boolean","colorProps","displayName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Mixins from '../utils/mixins';\nimport Utils from '../utils/utils';\nimport __reactComponentWatch from '../runtime-helpers/react-component-watch.js';\nimport __reactComponentDispatchEvent from '../runtime-helpers/react-component-dispatch-event.js';\nimport __reactComponentSlots from '../runtime-helpers/react-component-slots.js';\nimport __reactComponentSetProps from '../runtime-helpers/react-component-set-props.js';\n\nclass F7LoginScreen extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.__reactRefs = {};\n\n    (() => {\n      Utils.bindMethods(this, ['onOpen', 'onOpened', 'onClose', 'onClosed']);\n    })();\n  }\n\n  onOpen(instance) {\n    this.dispatchEvent('loginscreen:open loginScreenOpen', instance);\n  }\n\n  onOpened(instance) {\n    this.dispatchEvent('loginscreen:opened loginScreenOpened', instance);\n  }\n\n  onClose(instance) {\n    this.dispatchEvent('loginscreen:close loginScreenClose', instance);\n  }\n\n  onClosed(instance) {\n    this.dispatchEvent('loginscreen:closed loginScreenClosed', instance);\n  }\n\n  open(animate) {\n    const self = this;\n    if (!self.f7LoginScreen) return undefined;\n    return self.f7LoginScreen.open(animate);\n  }\n\n  close(animate) {\n    const self = this;\n    if (!self.f7LoginScreen) return undefined;\n    return self.f7LoginScreen.close(animate);\n  }\n\n  render() {\n    const self = this;\n    const props = self.props;\n    const {\n      className,\n      id,\n      style\n    } = props;\n    const classes = Utils.classNames(className, 'login-screen', Mixins.colorClasses(props));\n    return React.createElement('div', {\n      ref: __reactNode => {\n        this.__reactRefs['el'] = __reactNode;\n      },\n      id: id,\n      style: style,\n      className: classes\n    }, this.slots['default']);\n  }\n\n  componentWillUnmount() {\n    const self = this;\n    if (self.f7LoginScreen) self.f7LoginScreen.destroy();\n  }\n\n  componentDidMount() {\n    const self = this;\n    const el = self.refs.el;\n    if (!el) return;\n    self.$f7ready(() => {\n      self.f7LoginScreen = self.$f7.loginScreen.create({\n        el,\n        on: {\n          open: self.onOpen,\n          opened: self.onOpened,\n          close: self.onClose,\n          closed: self.onClosed\n        }\n      });\n\n      if (self.props.opened) {\n        self.f7LoginScreen.open(false);\n      }\n    });\n  }\n\n  get slots() {\n    return __reactComponentSlots(this.props);\n  }\n\n  dispatchEvent(events, ...args) {\n    return __reactComponentDispatchEvent(this, events, ...args);\n  }\n\n  get refs() {\n    return this.__reactRefs;\n  }\n\n  set refs(refs) {}\n\n  componentDidUpdate(prevProps, prevState) {\n    __reactComponentWatch(this, 'props.opened', prevProps, prevState, opened => {\n      const self = this;\n      if (!self.f7LoginScreen) return;\n\n      if (opened) {\n        self.f7LoginScreen.open();\n      } else {\n        self.f7LoginScreen.close();\n      }\n    });\n  }\n\n}\n\n__reactComponentSetProps(F7LoginScreen, Object.assign({\n  id: [String, Number],\n  className: String,\n  style: Object,\n  opened: Boolean\n}, Mixins.colorProps));\n\nF7LoginScreen.displayName = 'f7-login-screen';\nexport default F7LoginScreen;"]},"metadata":{},"sourceType":"module"}