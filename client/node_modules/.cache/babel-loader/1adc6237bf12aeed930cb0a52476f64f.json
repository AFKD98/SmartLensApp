{"ast":null,"code":"import React from 'react';\nimport Utils from '../utils/utils';\nimport Mixins from '../utils/mixins';\nimport __reactComponentWatch from '../runtime-helpers/react-component-watch.js';\nimport __reactComponentDispatchEvent from '../runtime-helpers/react-component-dispatch-event.js';\nimport __reactComponentSlots from '../runtime-helpers/react-component-slots.js';\nimport __reactComponentSetProps from '../runtime-helpers/react-component-set-props.js';\n\nclass F7Panel extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.__reactRefs = {};\n\n    (() => {\n      Utils.bindMethods(this, ['onOpen', 'onOpened', 'onClose', 'onClosed', 'onBackdropClick', 'onSwipe', 'onSwipeOpen', 'onBreakpoint', 'onCollapsedBreakpoint', 'onResize']);\n    })();\n  }\n\n  onOpen(event) {\n    this.dispatchEvent('panel:open panelOpen', event);\n  }\n\n  onOpened(event) {\n    this.dispatchEvent('panel:opened panelOpened', event);\n  }\n\n  onClose(event) {\n    this.dispatchEvent('panel:close panelClose', event);\n  }\n\n  onClosed(event) {\n    this.dispatchEvent('panel:closed panelClosed', event);\n  }\n\n  onBackdropClick(event) {\n    this.dispatchEvent('panel:backdrop-click panelBackdropClick', event);\n  }\n\n  onSwipe(event) {\n    this.dispatchEvent('panel:swipe panelSwipe', event);\n  }\n\n  onSwipeOpen(event) {\n    this.dispatchEvent('panel:swipeopen panelSwipeOpen', event);\n  }\n\n  onBreakpoint(event) {\n    this.dispatchEvent('panel:breakpoint panelBreakpoint', event);\n  }\n\n  onCollapsedBreakpoint(event) {\n    this.dispatchEvent('panel:collapsedbreakpoint panelCollapsedBreakpoint', event);\n  }\n\n  onResize(...args) {\n    this.dispatchEvent('panel:resize panelResize', ...args);\n  }\n\n  open(animate) {\n    const self = this;\n    if (!self.f7Panel) return;\n    self.f7Panel.open(animate);\n  }\n\n  close(animate) {\n    const self = this;\n    if (!self.f7Panel) return;\n    self.f7Panel.close(animate);\n  }\n\n  toggle(animate) {\n    const self = this;\n    if (!self.f7Panel) return;\n    self.f7Panel.toggle(animate);\n  }\n\n  get classes() {\n    const self = this;\n    const props = self.props;\n    const {\n      left,\n      reveal,\n      className,\n      resizable\n    } = props;\n    let {\n      side,\n      effect\n    } = props;\n    side = side || (left ? 'left' : 'right');\n    effect = effect || (reveal ? 'reveal' : 'cover');\n    return Utils.classNames(className, 'panel', {\n      'panel-resizable': resizable,\n      [`panel-${side}`]: side,\n      [`panel-${effect}`]: effect\n    }, Mixins.colorClasses(props));\n  }\n\n  render() {\n    const props = this.props;\n    const {\n      id,\n      style,\n      resizable\n    } = props;\n    return React.createElement('div', {\n      ref: __reactNode => {\n        this.__reactRefs['el'] = __reactNode;\n      },\n      id: id,\n      style: style,\n      className: this.classes\n    }, this.slots['default'], resizable && React.createElement('div', {\n      className: 'panel-resize-handler'\n    }));\n  }\n\n  componentWillUnmount() {\n    const self = this;\n\n    if (self.f7Panel && self.f7Panel.destroy) {\n      self.f7Panel.destroy();\n    }\n  }\n\n  componentDidMount() {\n    const self = this;\n    const el = self.refs.el;\n    const {\n      opened,\n      resizable,\n      backdrop,\n      backdropEl,\n      visibleBreakpoint,\n      collapsedBreakpoint,\n      swipe,\n      swipeOnlyClose,\n      swipeActiveArea,\n      swipeThreshold\n    } = self.props;\n    self.$f7ready(() => {\n      const $ = self.$$;\n      if (!$) return;\n\n      if ($('.panel-backdrop').length === 0) {\n        $('<div class=\"panel-backdrop\"></div>').insertBefore(el);\n      }\n\n      const params = Utils.noUndefinedProps({\n        el,\n        resizable,\n        backdrop,\n        backdropEl,\n        visibleBreakpoint,\n        collapsedBreakpoint,\n        swipe,\n        swipeOnlyClose,\n        swipeActiveArea,\n        swipeThreshold,\n        on: {\n          open: self.onOpen,\n          opened: self.onOpened,\n          close: self.onClose,\n          closed: self.onClosed,\n          backdropClick: self.onBackdropClick,\n          swipe: self.onSwipe,\n          swipeOpen: self.onSwipeOpen,\n          collapsedBreakpoint: self.onCollapsedBreakpoint,\n          breakpoint: self.onBreakpoint,\n          resize: self.onResize\n        }\n      });\n      self.f7Panel = self.$f7.panel.create(params);\n\n      if (opened) {\n        self.f7Panel.open(false);\n      }\n    });\n  }\n\n  get slots() {\n    return __reactComponentSlots(this.props);\n  }\n\n  dispatchEvent(events, ...args) {\n    return __reactComponentDispatchEvent(this, events, ...args);\n  }\n\n  get refs() {\n    return this.__reactRefs;\n  }\n\n  set refs(refs) {}\n\n  componentDidUpdate(prevProps, prevState) {\n    __reactComponentWatch(this, 'props.resizable', prevProps, prevState, resizable => {\n      const self = this;\n      if (!self.f7Panel) return;\n      if (resizable) self.f7Panel.enableResizable();else self.f7Panel.disableResizable();\n    });\n\n    __reactComponentWatch(this, 'props.opened', prevProps, prevState, opened => {\n      const self = this;\n      if (!self.f7Panel) return;\n\n      if (opened) {\n        self.f7Panel.open();\n      } else {\n        self.f7Panel.close();\n      }\n    });\n  }\n\n}\n\n__reactComponentSetProps(F7Panel, Object.assign({\n  id: [String, Number],\n  className: String,\n  style: Object,\n  side: String,\n  effect: String,\n  cover: Boolean,\n  reveal: Boolean,\n  left: Boolean,\n  right: Boolean,\n  opened: Boolean,\n  resizable: Boolean,\n  backdrop: {\n    type: Boolean,\n    default: true\n  },\n  backdropEl: {\n    type: String,\n    default: undefined\n  },\n  visibleBreakpoint: {\n    type: Number,\n    default: undefined\n  },\n  collapsedBreakpoint: {\n    type: Number,\n    default: undefined\n  },\n  swipe: Boolean,\n  swipeOnlyClose: Boolean,\n  swipeActiveArea: {\n    type: Number,\n    default: 0\n  },\n  swipeThreshold: {\n    type: Number,\n    default: 0\n  }\n}, Mixins.colorProps));\n\nF7Panel.displayName = 'f7-panel';\nexport default F7Panel;","map":{"version":3,"sources":["/home/faraz/courses/SE/myapp/node_modules/framework7-react/components/panel.js"],"names":["React","Utils","Mixins","__reactComponentWatch","__reactComponentDispatchEvent","__reactComponentSlots","__reactComponentSetProps","F7Panel","Component","constructor","props","context","__reactRefs","bindMethods","onOpen","event","dispatchEvent","onOpened","onClose","onClosed","onBackdropClick","onSwipe","onSwipeOpen","onBreakpoint","onCollapsedBreakpoint","onResize","args","open","animate","self","f7Panel","close","toggle","classes","left","reveal","className","resizable","side","effect","classNames","colorClasses","render","id","style","createElement","ref","__reactNode","slots","componentWillUnmount","destroy","componentDidMount","el","refs","opened","backdrop","backdropEl","visibleBreakpoint","collapsedBreakpoint","swipe","swipeOnlyClose","swipeActiveArea","swipeThreshold","$f7ready","$","$$","length","insertBefore","params","noUndefinedProps","on","closed","backdropClick","swipeOpen","breakpoint","resize","$f7","panel","create","events","componentDidUpdate","prevProps","prevState","enableResizable","disableResizable","Object","assign","String","Number","cover","Boolean","right","type","default","undefined","colorProps","displayName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Utils from '../utils/utils';\nimport Mixins from '../utils/mixins';\nimport __reactComponentWatch from '../runtime-helpers/react-component-watch.js';\nimport __reactComponentDispatchEvent from '../runtime-helpers/react-component-dispatch-event.js';\nimport __reactComponentSlots from '../runtime-helpers/react-component-slots.js';\nimport __reactComponentSetProps from '../runtime-helpers/react-component-set-props.js';\n\nclass F7Panel extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.__reactRefs = {};\n\n    (() => {\n      Utils.bindMethods(this, ['onOpen', 'onOpened', 'onClose', 'onClosed', 'onBackdropClick', 'onSwipe', 'onSwipeOpen', 'onBreakpoint', 'onCollapsedBreakpoint', 'onResize']);\n    })();\n  }\n\n  onOpen(event) {\n    this.dispatchEvent('panel:open panelOpen', event);\n  }\n\n  onOpened(event) {\n    this.dispatchEvent('panel:opened panelOpened', event);\n  }\n\n  onClose(event) {\n    this.dispatchEvent('panel:close panelClose', event);\n  }\n\n  onClosed(event) {\n    this.dispatchEvent('panel:closed panelClosed', event);\n  }\n\n  onBackdropClick(event) {\n    this.dispatchEvent('panel:backdrop-click panelBackdropClick', event);\n  }\n\n  onSwipe(event) {\n    this.dispatchEvent('panel:swipe panelSwipe', event);\n  }\n\n  onSwipeOpen(event) {\n    this.dispatchEvent('panel:swipeopen panelSwipeOpen', event);\n  }\n\n  onBreakpoint(event) {\n    this.dispatchEvent('panel:breakpoint panelBreakpoint', event);\n  }\n\n  onCollapsedBreakpoint(event) {\n    this.dispatchEvent('panel:collapsedbreakpoint panelCollapsedBreakpoint', event);\n  }\n\n  onResize(...args) {\n    this.dispatchEvent('panel:resize panelResize', ...args);\n  }\n\n  open(animate) {\n    const self = this;\n    if (!self.f7Panel) return;\n    self.f7Panel.open(animate);\n  }\n\n  close(animate) {\n    const self = this;\n    if (!self.f7Panel) return;\n    self.f7Panel.close(animate);\n  }\n\n  toggle(animate) {\n    const self = this;\n    if (!self.f7Panel) return;\n    self.f7Panel.toggle(animate);\n  }\n\n  get classes() {\n    const self = this;\n    const props = self.props;\n    const {\n      left,\n      reveal,\n      className,\n      resizable\n    } = props;\n    let {\n      side,\n      effect\n    } = props;\n    side = side || (left ? 'left' : 'right');\n    effect = effect || (reveal ? 'reveal' : 'cover');\n    return Utils.classNames(className, 'panel', {\n      'panel-resizable': resizable,\n      [`panel-${side}`]: side,\n      [`panel-${effect}`]: effect\n    }, Mixins.colorClasses(props));\n  }\n\n  render() {\n    const props = this.props;\n    const {\n      id,\n      style,\n      resizable\n    } = props;\n    return React.createElement('div', {\n      ref: __reactNode => {\n        this.__reactRefs['el'] = __reactNode;\n      },\n      id: id,\n      style: style,\n      className: this.classes\n    }, this.slots['default'], resizable && React.createElement('div', {\n      className: 'panel-resize-handler'\n    }));\n  }\n\n  componentWillUnmount() {\n    const self = this;\n\n    if (self.f7Panel && self.f7Panel.destroy) {\n      self.f7Panel.destroy();\n    }\n  }\n\n  componentDidMount() {\n    const self = this;\n    const el = self.refs.el;\n    const {\n      opened,\n      resizable,\n      backdrop,\n      backdropEl,\n      visibleBreakpoint,\n      collapsedBreakpoint,\n      swipe,\n      swipeOnlyClose,\n      swipeActiveArea,\n      swipeThreshold\n    } = self.props;\n    self.$f7ready(() => {\n      const $ = self.$$;\n      if (!$) return;\n\n      if ($('.panel-backdrop').length === 0) {\n        $('<div class=\"panel-backdrop\"></div>').insertBefore(el);\n      }\n\n      const params = Utils.noUndefinedProps({\n        el,\n        resizable,\n        backdrop,\n        backdropEl,\n        visibleBreakpoint,\n        collapsedBreakpoint,\n        swipe,\n        swipeOnlyClose,\n        swipeActiveArea,\n        swipeThreshold,\n        on: {\n          open: self.onOpen,\n          opened: self.onOpened,\n          close: self.onClose,\n          closed: self.onClosed,\n          backdropClick: self.onBackdropClick,\n          swipe: self.onSwipe,\n          swipeOpen: self.onSwipeOpen,\n          collapsedBreakpoint: self.onCollapsedBreakpoint,\n          breakpoint: self.onBreakpoint,\n          resize: self.onResize\n        }\n      });\n      self.f7Panel = self.$f7.panel.create(params);\n\n      if (opened) {\n        self.f7Panel.open(false);\n      }\n    });\n  }\n\n  get slots() {\n    return __reactComponentSlots(this.props);\n  }\n\n  dispatchEvent(events, ...args) {\n    return __reactComponentDispatchEvent(this, events, ...args);\n  }\n\n  get refs() {\n    return this.__reactRefs;\n  }\n\n  set refs(refs) {}\n\n  componentDidUpdate(prevProps, prevState) {\n    __reactComponentWatch(this, 'props.resizable', prevProps, prevState, resizable => {\n      const self = this;\n      if (!self.f7Panel) return;\n      if (resizable) self.f7Panel.enableResizable();else self.f7Panel.disableResizable();\n    });\n\n    __reactComponentWatch(this, 'props.opened', prevProps, prevState, opened => {\n      const self = this;\n      if (!self.f7Panel) return;\n\n      if (opened) {\n        self.f7Panel.open();\n      } else {\n        self.f7Panel.close();\n      }\n    });\n  }\n\n}\n\n__reactComponentSetProps(F7Panel, Object.assign({\n  id: [String, Number],\n  className: String,\n  style: Object,\n  side: String,\n  effect: String,\n  cover: Boolean,\n  reveal: Boolean,\n  left: Boolean,\n  right: Boolean,\n  opened: Boolean,\n  resizable: Boolean,\n  backdrop: {\n    type: Boolean,\n    default: true\n  },\n  backdropEl: {\n    type: String,\n    default: undefined\n  },\n  visibleBreakpoint: {\n    type: Number,\n    default: undefined\n  },\n  collapsedBreakpoint: {\n    type: Number,\n    default: undefined\n  },\n  swipe: Boolean,\n  swipeOnlyClose: Boolean,\n  swipeActiveArea: {\n    type: Number,\n    default: 0\n  },\n  swipeThreshold: {\n    type: Number,\n    default: 0\n  }\n}, Mixins.colorProps));\n\nF7Panel.displayName = 'f7-panel';\nexport default F7Panel;"]},"metadata":{},"sourceType":"module"}