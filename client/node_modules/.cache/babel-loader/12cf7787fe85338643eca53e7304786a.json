{"ast":null,"code":"import React from 'react';\nimport Utils from '../utils/utils';\nimport Mixins from '../utils/mixins';\nimport __reactComponentWatch from '../runtime-helpers/react-component-watch.js';\nimport __reactComponentDispatchEvent from '../runtime-helpers/react-component-dispatch-event.js';\nimport __reactComponentSetProps from '../runtime-helpers/react-component-set-props.js';\n\nclass F7Toggle extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.__reactRefs = {};\n\n    (() => {\n      Utils.bindMethods(this, ['onChange']);\n    })();\n  }\n\n  toggle() {\n    const self = this;\n    if (self.f7Toggle && self.f7Toggle.toggle) self.f7Toggle.toggle();\n  }\n\n  onChange(event) {\n    const self = this;\n    self.dispatchEvent('change', event);\n  }\n\n  render() {\n    const self = this;\n    const props = self.props;\n    const {\n      className,\n      disabled,\n      id,\n      style,\n      name,\n      readonly,\n      checked,\n      defaultChecked,\n      value\n    } = props;\n    const labelClasses = Utils.classNames('toggle', className, {\n      disabled\n    }, Mixins.colorClasses(props));\n    let inputEl;\n    {\n      inputEl = React.createElement('input', {\n        ref: __reactNode => {\n          this.__reactRefs['inputEl'] = __reactNode;\n        },\n        type: 'checkbox',\n        name: name,\n        disabled: disabled,\n        readOnly: readonly,\n        checked: checked,\n        defaultChecked: defaultChecked,\n        value: value,\n        onChange: self.onChange\n      });\n    }\n    return React.createElement('label', {\n      ref: __reactNode => {\n        this.__reactRefs['el'] = __reactNode;\n      },\n      id: id,\n      style: style,\n      className: labelClasses\n    }, inputEl, React.createElement('span', {\n      className: 'toggle-icon'\n    }));\n  }\n\n  componentWillUnmount() {\n    const self = this;\n    if (self.f7Toggle && self.f7Toggle.destroy && self.f7Toggle.$el) self.f7Toggle.destroy();\n  }\n\n  componentDidMount() {\n    const self = this;\n    if (!self.props.init) return;\n    self.$f7ready(f7 => {\n      self.f7Toggle = f7.toggle.create({\n        el: self.refs.el,\n        on: {\n          change(toggle) {\n            self.dispatchEvent('toggle:change toggleChange', toggle.checked);\n          }\n\n        }\n      });\n    });\n  }\n\n  dispatchEvent(events, ...args) {\n    return __reactComponentDispatchEvent(this, events, ...args);\n  }\n\n  get refs() {\n    return this.__reactRefs;\n  }\n\n  set refs(refs) {}\n\n  componentDidUpdate(prevProps, prevState) {\n    __reactComponentWatch(this, 'props.checked', prevProps, prevState, newValue => {\n      const self = this;\n      if (!self.f7Toggle) return;\n      self.f7Toggle.checked = newValue;\n    });\n  }\n\n}\n\n__reactComponentSetProps(F7Toggle, Object.assign({\n  id: [String, Number],\n  className: String,\n  style: Object,\n  init: {\n    type: Boolean,\n    default: true\n  },\n  checked: Boolean,\n  defaultChecked: Boolean,\n  disabled: Boolean,\n  readonly: Boolean,\n  name: String,\n  value: [String, Number, Array]\n}, Mixins.colorProps));\n\nF7Toggle.displayName = 'f7-toggle';\nexport default F7Toggle;","map":{"version":3,"sources":["/home/faraz/courses/SE/myapp/node_modules/framework7-react/components/toggle.js"],"names":["React","Utils","Mixins","__reactComponentWatch","__reactComponentDispatchEvent","__reactComponentSetProps","F7Toggle","Component","constructor","props","context","__reactRefs","bindMethods","toggle","self","f7Toggle","onChange","event","dispatchEvent","render","className","disabled","id","style","name","readonly","checked","defaultChecked","value","labelClasses","classNames","colorClasses","inputEl","createElement","ref","__reactNode","type","readOnly","componentWillUnmount","destroy","$el","componentDidMount","init","$f7ready","f7","create","el","refs","on","change","events","args","componentDidUpdate","prevProps","prevState","newValue","Object","assign","String","Number","Boolean","default","Array","colorProps","displayName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Utils from '../utils/utils';\nimport Mixins from '../utils/mixins';\nimport __reactComponentWatch from '../runtime-helpers/react-component-watch.js';\nimport __reactComponentDispatchEvent from '../runtime-helpers/react-component-dispatch-event.js';\nimport __reactComponentSetProps from '../runtime-helpers/react-component-set-props.js';\n\nclass F7Toggle extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.__reactRefs = {};\n\n    (() => {\n      Utils.bindMethods(this, ['onChange']);\n    })();\n  }\n\n  toggle() {\n    const self = this;\n    if (self.f7Toggle && self.f7Toggle.toggle) self.f7Toggle.toggle();\n  }\n\n  onChange(event) {\n    const self = this;\n    self.dispatchEvent('change', event);\n  }\n\n  render() {\n    const self = this;\n    const props = self.props;\n    const {\n      className,\n      disabled,\n      id,\n      style,\n      name,\n      readonly,\n      checked,\n      defaultChecked,\n      value\n    } = props;\n    const labelClasses = Utils.classNames('toggle', className, {\n      disabled\n    }, Mixins.colorClasses(props));\n    let inputEl;\n    {\n      inputEl = React.createElement('input', {\n        ref: __reactNode => {\n          this.__reactRefs['inputEl'] = __reactNode;\n        },\n        type: 'checkbox',\n        name: name,\n        disabled: disabled,\n        readOnly: readonly,\n        checked: checked,\n        defaultChecked: defaultChecked,\n        value: value,\n        onChange: self.onChange\n      });\n    }\n    return React.createElement('label', {\n      ref: __reactNode => {\n        this.__reactRefs['el'] = __reactNode;\n      },\n      id: id,\n      style: style,\n      className: labelClasses\n    }, inputEl, React.createElement('span', {\n      className: 'toggle-icon'\n    }));\n  }\n\n  componentWillUnmount() {\n    const self = this;\n    if (self.f7Toggle && self.f7Toggle.destroy && self.f7Toggle.$el) self.f7Toggle.destroy();\n  }\n\n  componentDidMount() {\n    const self = this;\n    if (!self.props.init) return;\n    self.$f7ready(f7 => {\n      self.f7Toggle = f7.toggle.create({\n        el: self.refs.el,\n        on: {\n          change(toggle) {\n            self.dispatchEvent('toggle:change toggleChange', toggle.checked);\n          }\n\n        }\n      });\n    });\n  }\n\n  dispatchEvent(events, ...args) {\n    return __reactComponentDispatchEvent(this, events, ...args);\n  }\n\n  get refs() {\n    return this.__reactRefs;\n  }\n\n  set refs(refs) {}\n\n  componentDidUpdate(prevProps, prevState) {\n    __reactComponentWatch(this, 'props.checked', prevProps, prevState, newValue => {\n      const self = this;\n      if (!self.f7Toggle) return;\n      self.f7Toggle.checked = newValue;\n    });\n  }\n\n}\n\n__reactComponentSetProps(F7Toggle, Object.assign({\n  id: [String, Number],\n  className: String,\n  style: Object,\n  init: {\n    type: Boolean,\n    default: true\n  },\n  checked: Boolean,\n  defaultChecked: Boolean,\n  disabled: Boolean,\n  readonly: Boolean,\n  name: String,\n  value: [String, Number, Array]\n}, Mixins.colorProps));\n\nF7Toggle.displayName = 'f7-toggle';\nexport default F7Toggle;"]},"metadata":{},"sourceType":"module"}