{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.joinAlignedDiffsExpand = exports.joinAlignedDiffsNoExpand = void 0;\n\nvar _cleanupSemantic = require('./cleanupSemantic');\n\nvar _printDiffs = require('./printDiffs');\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar DIFF_CONTEXT_DEFAULT = 5; // same as diffLines\n// jest --no-expand\n//\n// Given array of aligned strings with inverse highlight formatting,\n// return joined lines with diff formatting (and patch marks, if needed).\n\nvar joinAlignedDiffsNoExpand = function joinAlignedDiffsNoExpand(diffs) {\n  var nContextLines = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DIFF_CONTEXT_DEFAULT;\n  var iLength = diffs.length;\n  var nContextLines2 = nContextLines + nContextLines; // First pass: count output lines and see if it has patches.\n\n  var jLength = iLength;\n  var hasExcessAtStartOrEnd = false;\n  var nExcessesBetweenChanges = 0;\n  var i = 0;\n\n  while (i !== iLength) {\n    var iStart = i;\n\n    while (i !== iLength && diffs[i][0] === _cleanupSemantic.DIFF_EQUAL) {\n      i += 1;\n    }\n\n    if (iStart !== i) {\n      if (iStart === 0) {\n        // at start\n        if (i > nContextLines) {\n          jLength -= i - nContextLines; // subtract excess common lines\n\n          hasExcessAtStartOrEnd = true;\n        }\n      } else if (i === iLength) {\n        // at end\n        var n = i - iStart;\n\n        if (n > nContextLines) {\n          jLength -= n - nContextLines; // subtract excess common lines\n\n          hasExcessAtStartOrEnd = true;\n        }\n      } else {\n        // between changes\n        var _n = i - iStart;\n\n        if (_n > nContextLines2) {\n          jLength -= _n - nContextLines2; // subtract excess common lines\n\n          nExcessesBetweenChanges += 1;\n        }\n      }\n    }\n\n    while (i !== iLength && diffs[i][0] !== _cleanupSemantic.DIFF_EQUAL) {\n      i += 1;\n    }\n  }\n\n  var hasPatch = nExcessesBetweenChanges !== 0 || hasExcessAtStartOrEnd;\n\n  if (nExcessesBetweenChanges !== 0) {\n    jLength += nExcessesBetweenChanges + 1; // add patch lines\n  } else if (hasExcessAtStartOrEnd) {\n    jLength += 1; // add patch line\n  }\n\n  var jLast = jLength - 1;\n  var lines = [];\n  var jPatchMark = 0; // index of placeholder line for current patch mark\n\n  if (hasPatch) {\n    lines.push(''); // placeholder line for first patch mark\n  } // Indexes of expected or received lines in current patch:\n\n\n  var aStart = 0;\n  var bStart = 0;\n  var aEnd = 0;\n  var bEnd = 0;\n\n  var pushCommonLine = function pushCommonLine(line) {\n    var j = lines.length;\n    lines.push((0, _printDiffs.printCommonLine)(line, j === 0 || j === jLast));\n    aEnd += 1;\n    bEnd += 1;\n  };\n\n  var pushDeleteLine = function pushDeleteLine(line) {\n    lines.push((0, _printDiffs.printDeleteLine)(line));\n    aEnd += 1;\n  };\n\n  var pushInsertLine = function pushInsertLine(line) {\n    lines.push((0, _printDiffs.printInsertLine)(line));\n    bEnd += 1;\n  }; // Second pass: push lines with diff formatting (and patch marks, if needed).\n\n\n  i = 0;\n\n  while (i !== iLength) {\n    var _iStart = i;\n\n    while (i !== iLength && diffs[i][0] === _cleanupSemantic.DIFF_EQUAL) {\n      i += 1;\n    }\n\n    if (_iStart !== i) {\n      if (_iStart === 0) {\n        // at beginning\n        if (i > nContextLines) {\n          _iStart = i - nContextLines;\n          aStart = _iStart;\n          bStart = _iStart;\n          aEnd = aStart;\n          bEnd = bStart;\n        }\n\n        for (var iCommon = _iStart; iCommon !== i; iCommon += 1) {\n          pushCommonLine(diffs[iCommon][1]);\n        }\n      } else if (i === iLength) {\n        // at end\n        var iEnd = i - _iStart > nContextLines ? _iStart + nContextLines : i;\n\n        for (var _iCommon = _iStart; _iCommon !== iEnd; _iCommon += 1) {\n          pushCommonLine(diffs[_iCommon][1]);\n        }\n      } else {\n        // between changes\n        var nCommon = i - _iStart;\n\n        if (nCommon > nContextLines2) {\n          var _iEnd = _iStart + nContextLines;\n\n          for (var _iCommon2 = _iStart; _iCommon2 !== _iEnd; _iCommon2 += 1) {\n            pushCommonLine(diffs[_iCommon2][1]);\n          }\n\n          lines[jPatchMark] = (0, _printDiffs.createPatchMark)(aStart, aEnd, bStart, bEnd);\n          jPatchMark = lines.length;\n          lines.push(''); // placeholder line for next patch mark\n\n          var nOmit = nCommon - nContextLines2;\n          aStart = aEnd + nOmit;\n          bStart = bEnd + nOmit;\n          aEnd = aStart;\n          bEnd = bStart;\n\n          for (var _iCommon3 = i - nContextLines; _iCommon3 !== i; _iCommon3 += 1) {\n            pushCommonLine(diffs[_iCommon3][1]);\n          }\n        } else {\n          for (var _iCommon4 = _iStart; _iCommon4 !== i; _iCommon4 += 1) {\n            pushCommonLine(diffs[_iCommon4][1]);\n          }\n        }\n      }\n    }\n\n    while (i !== iLength && diffs[i][0] === _cleanupSemantic.DIFF_DELETE) {\n      pushDeleteLine(diffs[i][1]);\n      i += 1;\n    }\n\n    while (i !== iLength && diffs[i][0] === _cleanupSemantic.DIFF_INSERT) {\n      pushInsertLine(diffs[i][1]);\n      i += 1;\n    }\n  }\n\n  if (hasPatch) {\n    lines[jPatchMark] = (0, _printDiffs.createPatchMark)(aStart, aEnd, bStart, bEnd);\n  }\n\n  return lines.join('\\n');\n}; // jest --expand\n//\n// Given array of aligned strings with inverse highlight formatting,\n// return joined lines with diff formatting.\n\n\nexports.joinAlignedDiffsNoExpand = joinAlignedDiffsNoExpand;\n\nvar joinAlignedDiffsExpand = function joinAlignedDiffsExpand(diffs) {\n  return diffs.map(function (diff, i, diffs) {\n    var line = diff[1];\n\n    switch (diff[0]) {\n      case _cleanupSemantic.DIFF_DELETE:\n        return (0, _printDiffs.printDeleteLine)(line);\n\n      case _cleanupSemantic.DIFF_INSERT:\n        return (0, _printDiffs.printInsertLine)(line);\n\n      default:\n        return (0, _printDiffs.printCommonLine)(line, i === 0 || i === diffs.length - 1);\n    }\n  }).join('\\n');\n};\n\nexports.joinAlignedDiffsExpand = joinAlignedDiffsExpand;","map":{"version":3,"sources":["/home/faraz/courses/SE/myapp/client/node_modules/jest-diff/build/joinAlignedDiffs.js"],"names":["Object","defineProperty","exports","value","joinAlignedDiffsExpand","joinAlignedDiffsNoExpand","_cleanupSemantic","require","_printDiffs","DIFF_CONTEXT_DEFAULT","diffs","nContextLines","iLength","length","nContextLines2","jLength","hasExcessAtStartOrEnd","nExcessesBetweenChanges","i","iStart","DIFF_EQUAL","n","hasPatch","jLast","lines","jPatchMark","push","aStart","bStart","aEnd","bEnd","pushCommonLine","line","j","printCommonLine","pushDeleteLine","printDeleteLine","pushInsertLine","printInsertLine","iCommon","iEnd","nCommon","createPatchMark","nOmit","DIFF_DELETE","DIFF_INSERT","join","map","diff"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.joinAlignedDiffsExpand = exports.joinAlignedDiffsNoExpand = void 0;\n\nvar _cleanupSemantic = require('./cleanupSemantic');\n\nvar _printDiffs = require('./printDiffs');\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nconst DIFF_CONTEXT_DEFAULT = 5; // same as diffLines\n// jest --no-expand\n//\n// Given array of aligned strings with inverse highlight formatting,\n// return joined lines with diff formatting (and patch marks, if needed).\n\nconst joinAlignedDiffsNoExpand = (\n  diffs,\n  nContextLines = DIFF_CONTEXT_DEFAULT\n) => {\n  const iLength = diffs.length;\n  const nContextLines2 = nContextLines + nContextLines; // First pass: count output lines and see if it has patches.\n\n  let jLength = iLength;\n  let hasExcessAtStartOrEnd = false;\n  let nExcessesBetweenChanges = 0;\n  let i = 0;\n\n  while (i !== iLength) {\n    const iStart = i;\n\n    while (i !== iLength && diffs[i][0] === _cleanupSemantic.DIFF_EQUAL) {\n      i += 1;\n    }\n\n    if (iStart !== i) {\n      if (iStart === 0) {\n        // at start\n        if (i > nContextLines) {\n          jLength -= i - nContextLines; // subtract excess common lines\n\n          hasExcessAtStartOrEnd = true;\n        }\n      } else if (i === iLength) {\n        // at end\n        const n = i - iStart;\n\n        if (n > nContextLines) {\n          jLength -= n - nContextLines; // subtract excess common lines\n\n          hasExcessAtStartOrEnd = true;\n        }\n      } else {\n        // between changes\n        const n = i - iStart;\n\n        if (n > nContextLines2) {\n          jLength -= n - nContextLines2; // subtract excess common lines\n\n          nExcessesBetweenChanges += 1;\n        }\n      }\n    }\n\n    while (i !== iLength && diffs[i][0] !== _cleanupSemantic.DIFF_EQUAL) {\n      i += 1;\n    }\n  }\n\n  const hasPatch = nExcessesBetweenChanges !== 0 || hasExcessAtStartOrEnd;\n\n  if (nExcessesBetweenChanges !== 0) {\n    jLength += nExcessesBetweenChanges + 1; // add patch lines\n  } else if (hasExcessAtStartOrEnd) {\n    jLength += 1; // add patch line\n  }\n\n  const jLast = jLength - 1;\n  const lines = [];\n  let jPatchMark = 0; // index of placeholder line for current patch mark\n\n  if (hasPatch) {\n    lines.push(''); // placeholder line for first patch mark\n  } // Indexes of expected or received lines in current patch:\n\n  let aStart = 0;\n  let bStart = 0;\n  let aEnd = 0;\n  let bEnd = 0;\n\n  const pushCommonLine = line => {\n    const j = lines.length;\n    lines.push((0, _printDiffs.printCommonLine)(line, j === 0 || j === jLast));\n    aEnd += 1;\n    bEnd += 1;\n  };\n\n  const pushDeleteLine = line => {\n    lines.push((0, _printDiffs.printDeleteLine)(line));\n    aEnd += 1;\n  };\n\n  const pushInsertLine = line => {\n    lines.push((0, _printDiffs.printInsertLine)(line));\n    bEnd += 1;\n  }; // Second pass: push lines with diff formatting (and patch marks, if needed).\n\n  i = 0;\n\n  while (i !== iLength) {\n    let iStart = i;\n\n    while (i !== iLength && diffs[i][0] === _cleanupSemantic.DIFF_EQUAL) {\n      i += 1;\n    }\n\n    if (iStart !== i) {\n      if (iStart === 0) {\n        // at beginning\n        if (i > nContextLines) {\n          iStart = i - nContextLines;\n          aStart = iStart;\n          bStart = iStart;\n          aEnd = aStart;\n          bEnd = bStart;\n        }\n\n        for (let iCommon = iStart; iCommon !== i; iCommon += 1) {\n          pushCommonLine(diffs[iCommon][1]);\n        }\n      } else if (i === iLength) {\n        // at end\n        const iEnd = i - iStart > nContextLines ? iStart + nContextLines : i;\n\n        for (let iCommon = iStart; iCommon !== iEnd; iCommon += 1) {\n          pushCommonLine(diffs[iCommon][1]);\n        }\n      } else {\n        // between changes\n        const nCommon = i - iStart;\n\n        if (nCommon > nContextLines2) {\n          const iEnd = iStart + nContextLines;\n\n          for (let iCommon = iStart; iCommon !== iEnd; iCommon += 1) {\n            pushCommonLine(diffs[iCommon][1]);\n          }\n\n          lines[jPatchMark] = (0, _printDiffs.createPatchMark)(\n            aStart,\n            aEnd,\n            bStart,\n            bEnd\n          );\n          jPatchMark = lines.length;\n          lines.push(''); // placeholder line for next patch mark\n\n          const nOmit = nCommon - nContextLines2;\n          aStart = aEnd + nOmit;\n          bStart = bEnd + nOmit;\n          aEnd = aStart;\n          bEnd = bStart;\n\n          for (let iCommon = i - nContextLines; iCommon !== i; iCommon += 1) {\n            pushCommonLine(diffs[iCommon][1]);\n          }\n        } else {\n          for (let iCommon = iStart; iCommon !== i; iCommon += 1) {\n            pushCommonLine(diffs[iCommon][1]);\n          }\n        }\n      }\n    }\n\n    while (i !== iLength && diffs[i][0] === _cleanupSemantic.DIFF_DELETE) {\n      pushDeleteLine(diffs[i][1]);\n      i += 1;\n    }\n\n    while (i !== iLength && diffs[i][0] === _cleanupSemantic.DIFF_INSERT) {\n      pushInsertLine(diffs[i][1]);\n      i += 1;\n    }\n  }\n\n  if (hasPatch) {\n    lines[jPatchMark] = (0, _printDiffs.createPatchMark)(\n      aStart,\n      aEnd,\n      bStart,\n      bEnd\n    );\n  }\n\n  return lines.join('\\n');\n}; // jest --expand\n//\n// Given array of aligned strings with inverse highlight formatting,\n// return joined lines with diff formatting.\n\nexports.joinAlignedDiffsNoExpand = joinAlignedDiffsNoExpand;\n\nconst joinAlignedDiffsExpand = diffs =>\n  diffs\n    .map((diff, i, diffs) => {\n      const line = diff[1];\n\n      switch (diff[0]) {\n        case _cleanupSemantic.DIFF_DELETE:\n          return (0, _printDiffs.printDeleteLine)(line);\n\n        case _cleanupSemantic.DIFF_INSERT:\n          return (0, _printDiffs.printInsertLine)(line);\n\n        default:\n          return (0, _printDiffs.printCommonLine)(\n            line,\n            i === 0 || i === diffs.length - 1\n          );\n      }\n    })\n    .join('\\n');\n\nexports.joinAlignedDiffsExpand = joinAlignedDiffsExpand;\n"]},"metadata":{},"sourceType":"script"}