{"ast":null,"code":"import axios from \"axios\";\nimport { returnErrors } from \"./errorActions\";\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, REGISTER_SUCCESS, REGISTER_FAIL, LOGOUT_SUCCESS, LOGIN_SUCCESS, LOGIN_FAIL } from \"./types\"; // Check token & load user\n\nexport const loadUser = () => (dispatch, getState) => {\n  // USer loading\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.get(\"http://localhost:5000/user\", tokenConfig(getState)).then(res => dispatch({\n    type: USER_LOADED,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; // Register User\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; // request body\n\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n  axios.post(\"http://localhost:5000/users\", body, config).then(res => dispatch({\n    type: REGISTER_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    console.log(\"authactions\", err);\n    dispatch(returnErrors(err.response.data, err.response.status, \"REGISTER_FAIL\"));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  });\n}; // Login\n\nexport const login = ({\n  email,\n  password\n}) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; // request body\n\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  axios.post(\"http://localhost:5000/user\", body, config).then(res => dispatch({\n    type: LOGIN_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, \"LOGIN_FAIL\"));\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  });\n}; // Logout\n\nexport const logout = () => {\n  return {\n    type: LOGOUT_SUCCESS\n  };\n}; // setup config/headers and token\n\nexport const tokenConfig = getState => {\n  // Get token from local state\n  const token = getState().auth.token; // Headers\n\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; // if token, add to headers\n\n  if (token) {\n    config.headers[\"x-auth-token\"] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["D:/Stuff to move/Work/SE/deployed/client/src/actions/authActions.js"],"names":["axios","returnErrors","USER_LOADED","USER_LOADING","AUTH_ERROR","REGISTER_SUCCESS","REGISTER_FAIL","LOGOUT_SUCCESS","LOGIN_SUCCESS","LOGIN_FAIL","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","response","status","register","name","email","password","config","headers","body","JSON","stringify","post","console","log","login","logout","token","auth"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { returnErrors } from \"./errorActions\";\r\n\r\nimport {\r\n  USER_LOADED,\r\n  USER_LOADING,\r\n  AUTH_ERROR,\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  LOGOUT_SUCCESS,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n} from \"./types\";\r\n\r\n// Check token & load user\r\n\r\nexport const loadUser = () => (dispatch, getState) => {\r\n  // USer loading\r\n  dispatch({ type: USER_LOADING });\r\n\r\n  axios\r\n    .get(\"http://localhost:5000/user\", tokenConfig(getState))\r\n    .then((res) =>\r\n      dispatch({\r\n        type: USER_LOADED,\r\n        payload: res.data,\r\n      })\r\n    )\r\n    .catch((err) => {\r\n      dispatch(returnErrors(err.response.data, err.response.status));\r\n      dispatch({\r\n        type: AUTH_ERROR,\r\n      });\r\n    });\r\n};\r\n\r\n// Register User\r\nexport const register = ({ name, email, password }) => (dispatch) => {\r\n  // Headers\r\n  const config = {\r\n    headers: {\r\n      \"Content-type\": \"application/json\",\r\n    },\r\n  };\r\n\r\n  // request body\r\n  const body = JSON.stringify({ name, email, password });\r\n\r\n  axios\r\n    .post(\"http://localhost:5000/users\", body, config)\r\n    .then((res) =>\r\n      dispatch({\r\n        type: REGISTER_SUCCESS,\r\n        payload: res.data,\r\n      })\r\n    )\r\n    .catch((err) => {\r\n      console.log(\"authactions\", err);\r\n      dispatch(\r\n        returnErrors(err.response.data, err.response.status, \"REGISTER_FAIL\")\r\n      );\r\n      dispatch({\r\n        type: REGISTER_FAIL,\r\n      });\r\n    });\r\n};\r\n\r\n// Login\r\nexport const login = ({ email, password }) => (dispatch) => {\r\n  // Headers\r\n  const config = {\r\n    headers: {\r\n      \"Content-type\": \"application/json\",\r\n    },\r\n  };\r\n\r\n  // request body\r\n  const body = JSON.stringify({ email, password });\r\n\r\n  axios\r\n    .post(\"http://localhost:5000/user\", body, config)\r\n    .then((res) =>\r\n      dispatch({\r\n        type: LOGIN_SUCCESS,\r\n        payload: res.data,\r\n      })\r\n    )\r\n    .catch((err) => {\r\n      dispatch(\r\n        returnErrors(err.response.data, err.response.status, \"LOGIN_FAIL\")\r\n      );\r\n      dispatch({\r\n        type: LOGIN_FAIL,\r\n      });\r\n    });\r\n};\r\n\r\n// Logout\r\nexport const logout = () => {\r\n  return {\r\n    type: LOGOUT_SUCCESS,\r\n  };\r\n};\r\n\r\n// setup config/headers and token\r\nexport const tokenConfig = (getState) => {\r\n  // Get token from local state\r\n  const token = getState().auth.token;\r\n\r\n  // Headers\r\n  const config = {\r\n    headers: {\r\n      \"Content-type\": \"application/json\",\r\n    },\r\n  };\r\n\r\n  // if token, add to headers\r\n  if (token) {\r\n    config.headers[\"x-auth-token\"] = token;\r\n  }\r\n\r\n  return config;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}